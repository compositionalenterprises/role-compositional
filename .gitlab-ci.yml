image: docker:stable

services:
  - docker:dind

stages:
  - push

before_script:
  - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY

# Here, the goal is to tag the "master" branch as "latest"
Push latest:
  stage: push
  only:
    # Only "master" should be tagged "latest"
    - master
  script:
    # First we want to create the docker container
    - apk add --update git python3 py3-pip
    - pip3 install docker argparse
    - python3 roles/compositional/files/build_image.py --collection_version master
    # Then we want to push this up to ansible-galaxy as a collection
    # Then we notify ourcompose-alerts that this got done.
    - curl 'https://'$HOME_SERVER'/_matrix/client/r0/rooms/'$ROOM_ID'/send/m.room.message/'$CI_COMMIT_SHA'?access_token='$ACCESS_TOKEN'' -X PUT --data '{"msgtype":"m.text","body":"Collection - Gitlab Tag Built - master"}'

# Finally, the goal here is to Docker tag any Git tag
# GitLab will start a new pipeline everytime a Git tag is created, which is pretty awesome
Push tag:
  stage: push
  only:
    # We want this job to be run on tags only.
    # This is because there will never be a time when we push to a stable-* branch
    # that it does not get tagged. Every new commit on a stable-* branch should be tagged
    # with a new tag that gets incremented. This is done at the PR level. The PR is made,
    # and then we go and edit the galaxy.yml file for the cherry-pick or merge, and then
    # we merge it in. That in itself does not trigger this, but the point at which we tag
    # the commit on that branch does.
    - tags
  script:
    # First we want to create the docker container
    - apk add --update git python3 py3-pip curl
    - pip3 install docker argparse
    - python3 roles/compositional/files/build_image.py --collection_version $CI_COMMIT_TAG
    # Then we want to push this up to ansible-galaxy as a collection
    # Then we notify ourcompose-alerts that this got done.
    - curl 'https://'$HOME_SERVER'/_matrix/client/r0/rooms/'$ROOM_ID'/send/m.room.message/'$CI_COMMIT_SHA'?access_token='$ACCESS_TOKEN'' -X PUT --data '{"msgtype":"m.text","body":"Collection - Gitlab Tag Built - $CI_COMMIT_TAG"}'
