---
- name: (rundeck) Nginx conf is deployed
  template:
    src: "nginx_rundeck.conf.j2"
    dest: "/srv/{{ compositional_nginx_storage }}/nginx_conf.d/{{ environment_domain }}/rundeck.conf"
  notify: 'Restart Frontend'

- name: (rundeck) Persistant storage directories are provisioned
  file:
    path: "{{ item }}"
    owner: 1000
    group: 1000
    state: directory
  loop:
    - "/srv/{{ compositional_rundeck_storage }}/rundeck_data"
    - "/srv/{{ compositional_rundeck_storage }}/rundeck_config"
    - "/srv/{{ compositional_rundeck_storage }}/rundeck_logs"
    - "/srv/{{ compositional_rundeck_storage }}/rundeck_etc"

- name: (rundeck) The MySQL database service is up and initialized
  # We're running a while loop to check to ensure that the mysql database has
  # initialized:
  #   https://stackoverflow.com/questions/25503412/how-do-i-know-when-my-docker-mysql-container-is-up-and-mysql-is-ready-for-taking
  shell: 'docker exec -i database bash -c "while mysql -uroot -p{{ compositional_database_root_password }} -e \"SHOW DATABASES;\" 2>&1 | grep -e \"ERROR 2002\|ERROR 1045\"; do sleep 1; done; echo \"SHOW DATABASES SUCCEEDED\""'
  no_log: True

- name: (rundeck) Set up the MySQL database
  shell: docker exec -i database mysql -uroot -p{{ compositional_database_root_password }} <<< "{{ compositional_rundeck_mysql_script }}"
  args:
    executable: '/bin/bash'
  no_log: True

- name: (rundeck) The latest rundeck service is built and {{ compositional_rundeck_state }}
  docker_compose:
    project_name: rundeck
    definition:
      version: '3.6'
      services:
          rundeck:
              image: "rundeck/rundeck:{{ compositional_rundeck_version }}"
              container_name: rundeck
              restart: always
              volumes:
                  - "/srv/{{ compositional_rundeck_storage }}/rundeck_data:/home/rundeck/server/data"
                  - "/srv/{{ compositional_rundeck_storage }}/rundeck_config:/home/rundeck/server/config"
                  - "/srv/{{ compositional_rundeck_storage }}/rundeck_logs:/home/rundeck/var/logs"
                  - "/srv/{{ compositional_rundeck_storage }}/rundeck_etc:/home/rundeck/etc"

              networks:
                  - frontend
                  - backend

              environment:
                RUNDECK_GRAILS_URL: "https://{{ environment_domain }}/rundeck"
                RUNDECK_SERVER_FORWARDED: 'true'
                RUNDECK_SERVER_CONTEXTPATH: '/rundeck'
                RUNDECK_DATABASE_DRIVER: 'com.mysql.jdbc.Driver'
                RUNDECK_DATABASE_USERNAME: 'rundeck'
                RUNDECK_DATABASE_PASSWORD: "{{ compositional_rundeck_backend_password }}"
                RUNDECK_DATABASE_URL: 'jdbc:mysql://database/rundeck?autoReconnect=true&useSSL=false'
                RUNDECK_API_TOKENS_DURATION_MAX: "{{ compositional_rundeck_api_tokens_duration_max }}"

              healthcheck:
                test: "{{ compositional_rundeck_healthcheck }}"
                interval: 5s
                timeout: 30s
                retries: 3

      networks:
          frontend:
              external: true
          backend:
              external: true
    build: "{{ compositional_rundeck_build }}"
    state: "{{ compositional_rundeck_state }}"
  register: compositional_rundeck_output

- name: (rundeck) Run additional setup commands in rundeck container
  shell: docker exec -u 0 -i rundeck bash -c "{{ compositional_rundeck_additional_setup }}"
  args:
    executable: '/bin/bash'
  no_log: True

#
# Workaround for https://github.com/rundeck/rundeck/issues/5344
#
- name: (rundeck) Register presence of property files
  stat:
    path: "/srv/{{ compositional_rundeck_storage }}/rundeck_{{ item.split('/')[0] }}/{{ item.split('/')[1] }}"
  loop:
    - 'config/ssl.properties'
    - 'config/realm.properties'
    - 'etc/admin.aclpolicy'
    - 'etc/apitoken.aclpolicy'
    - 'etc/cli-log4j.properties'
    - 'etc/preferences.properties'
    - 'etc/profile'
    - 'etc/profile.bat'
    - 'etc/project.properties'
  register: compositional_rundeck_property_files

- name: (rundeck) Copy initial property files to server
  copy:
    src: "../files/rundeck_{{ item['item'].split('/')[1] }}"
    dest: "/srv/{{ compositional_rundeck_storage }}/rundeck_{{ item['item'].split('/')[0] }}/{{ item['item'].split('/')[1] }}"
    owner: 1000
    group: root
    mode: '0775'
  when: not item['stat']['exists']
  loop: "{{ compositional_rundeck_property_files['results'] }}"

#
# Bind Mountpoints
#
- name: (rundeck) Install unzip in rundeck container
  shell: docker exec -u 0 -i rundeck bash -c "apt update && apt install unzip"
  args:
    executable: '/bin/bash'

- name: (rundeck) Unzip assets directory from the rundeck WAR file
  shell: docker exec -i rundeck bash -c "unzip -o rundeck.war 'assets/*'"
  args:
    executable: '/bin/bash'

- name: (rundeck) Find source filesystem directory
  # We're ussing UpperDir here since the **directory** we need is actually generated after the container is running, and is not part of the image
  shell: for i in $(docker inspect --format {% raw %}{{.GraphDriver.Data.UpperDir}}{% endraw %} rundeck | tr ':' ' '); do if [[ -d ${i}{{ item['directory'] }} ]]; then echo ${i}; fi; done | head -n 1
  args:
    executable: /bin/bash
  when: not item['directory'].startswith('/srv')
  loop: "{{ compositional_rundeck_bind_mountpoints }}"
  register: compositional_rundeck_src_dirs

- debug:
    var: compositional_rundeck_src_dirs

- name: (rundeck) Register rundeck non-volume bind-mountpoints for proxy
  set_fact:
    compositional_proxy_bind_mountpoints: "{{ compositional_proxy_bind_mountpoints + [{'location': item['item']['location'], 'directory': item['stdout'] + item['item']['directory']}] }}"
  when: not item['item']['directory'].startswith('/srv')
  loop: "{{ compositional_rundeck_src_dirs['results'] }}"


- name: (rundeck) Register rundeck volume bind-mountpoints for proxy
  set_fact:
    compositional_proxy_bind_mountpoints: "{{ compositional_proxy_bind_mountpoints + [item] }}"
  when: item['directory'].startswith('/srv')
  loop: "{{ compositional_rundeck_bind_mountpoints }}"
