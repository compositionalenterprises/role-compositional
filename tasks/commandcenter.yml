---
- name: (commandcenter) Nginx conf is deployed
  template:
    src: "nginx_commandcenter.conf.j2"
    dest: "/srv/{{ compositional_nginx_storage }}/nginx_conf.d/{{ environment_domain }}/commandcenter.conf"
  notify: 'Restart Frontend'

- name: (commandcenter) The MySQL database service is up and initialized
  # We're running a while loop to check to ensure that the mysql database has
  # initialized:
  #   https://stackoverflow.com/questions/25503412/how-do-i-know-when-my-docker-mysql-container-is-up-and-mysql-is-ready-for-taking
  shell: 'docker exec -i database bash -c "while mysql -uroot -p{{ compositional_database_root_password }} -e \"SHOW DATABASES;\" 2>&1 | grep -e \"ERROR 2002\|ERROR 1045\"; do sleep 1; done; echo \"SHOW DATABASES SUCCEEDED\""'
  no_log: True

- name: (commandcenter) Set up the MySQL database
  shell: docker exec -i database mysql -uroot -p{{ compositional_database_root_password }} <<< "{{ compositional_commandcenter_mysql_script }}"
  args:
    executable: '/bin/bash'
  no_log: True

- name: (commandcenter) Ensure commandcenter_credentials directory exists
  file:
    path: "/srv/{{ compositional_commandcenter_storage }}/commandcenter_credentials"
    state: directory

- name: Create credentials files
  # So, let's review POSIX standards, shall we?
  #
  #     3.206 Line
  #     A sequence of zero or more non- <newline> characters plus a terminating
  #     <newline> character.
  #
  # So, these _files_, as we graciously call what we are templating below,
  # contain no lines. Now, wouldn't that mean that they are blank files? No! To
  # the contrary according to ruby developers around the world. These files are
  # to the standard of these blaggards who snub the very idea of
  # interoperability. So, be aware! These files **MUST** not have a line that
  # ends in a newline.
  template:
    src: 'commandcenter_{{ item }}.j2'
    dest: "/srv/{{ compositional_commandcenter_storage }}/commandcenter_credentials/{{ item }}"
    mode: 0600
    owner: root
  loop:
    - 'production.key'
    - 'production.yml.enc'

- name: (commandcenter) The commandcenter service version {{ compositional_commandcenter_version }} is built and {{ compositional_commandcenter_state }}
  docker_service:
    project_name: commandcenter
    definition:
      version: '3.6'
      services:
          commandcenter:
              image: "compositionalenterprises/commandcenter:{{ compositional_commandcenter_version }}"
              container_name: commandcenter
              restart: always
              volumes:
                  - "/srv/{{ compositional_commandcenter_storage }}/commandcenter_credentials:/app/config/credentials"
              networks:
                  - frontend
                  - backend
              environment:
                DB_HOST: 'database'
                DB_NAME: 'commandcenter'
                DB_USER: 'commandcenter'
                DB_PASS: "{{ compositional_commandcenter_backend_password }}"
                RAILS_RELATIVE_URL_ROOT: '/commandcenter'
                ADMIN_EMAIL: "{{ environment_admin }}@{{ environment_domain }}"
                ADMIN_PASSWORD: "{{ compositional_commandcenter_admin_password }}"
                HOST: "https://{{ environment_domain }}"

      networks:
          frontend:
              external: true
          backend:
              external: true

    build: "{{ compositional_commandcenter_build }}"
    state: "{{ compositional_commandcenter_state }}"
    restarted: "{{ compositional_commandcenter_restarted }}"
  register: compositional_commandcenter_output
  no_log: True

- name: (commandcenter) The commandcenter cron job to update the database with daily data
  cron:
    name: "CC Update Data"
    hour: "4"
    day: "*"
    job: "/usr/bin/docker exec commandcenter /app/bin/seeds/daily.sh"

#
# Bind Mountpoints
#

- name: (commandcenter) Find source filesystem directory
  shell: for i in $(docker inspect --format {% raw %}{{.GraphDriver.Data.LowerDir}}{% endraw %} commandcenter | tr ':' ' '); do if [[ -d ${i}{{ item['directory'] }} ]]; then echo ${i}; fi; done | head -n 1
  args:
    executable: /bin/bash
  when: not item['directory'].startswith('/srv')
  loop: "{{ compositional_commandcenter_bind_mountpoints }}"
  register: compositional_commandcenter_src_dirs

- debug:
    var: compositional_commandcenter_src_dirs

- name: (commandcenter) Register commandcenter non-volume bind-mountpoints for proxy
  set_fact:
    compositional_proxy_bind_mountpoints: "{{ compositional_proxy_bind_mountpoints + [{'location': item['item']['location'], 'directory': item['stdout'] + item['item']['directory']}] }}"
  when: not item['item']['directory'].startswith('/srv')
  loop: "{{ compositional_commandcenter_src_dirs['results'] }}"


- name: (commandcenter) Register commandcenter volume bind-mountpoints for proxy
  set_fact:
    compositional_proxy_bind_mountpoints: "{{ compositional_proxy_bind_mountpoints + [item] }}"
  when: item['directory'].startswith('/srv')
  loop: "{{ compositional_commandcenter_bind_mountpoints }}"
