---
#
# The reverse proxy subdirectory setup is pretty bad, See:
#
# - https://github.com/kanboard/kanboard/issues/3534
# - https://docs.kanboard.org/en/latest/admin_guide/url_rewriting.html
#
# But there is a workaround: https://github.com/kanboard/kanboard/issues/2561#issuecomment-238739921
#

- name: (kanboard) Nginx conf is deployed
  template:
    src: "nginx_kanboard.conf.j2"
    dest: "/srv/{{ compositional_nginx_storage }}/nginx_conf.d/{{ environment_domain }}/kanboard.conf"
  notify: 'Restart Frontend'

- name: (kanboard) The MySQL database service is up and initialized
  # We're running a while loop to check to ensure that the mysql database has
  # initialized:
  #   https://stackoverflow.com/questions/25503412/how-do-i-know-when-my-docker-mysql-container-is-up-and-mysql-is-ready-for-taking
  shell: 'docker exec -i database bash -c "while mysql -uroot -p{{ compositional_database_root_password }} -e \"SHOW DATABASES;\" 2>&1 | grep -e \"ERROR 2002\|ERROR 1045\"; do sleep 1; done; echo \"SHOW DATABASES SUCCEEDED\""'
  no_log: True

- name: (kanboard) Set up the MySQL database
  shell: docker exec -i database mysql -uroot -p{{ compositional_database_root_password }} <<< "{{ compositional_kanboard_mysql_script }}"
  args:
    executable: '/bin/bash'
  no_log: True

- name: (kanboard) The latest kanboard service is built and {{ compositional_kanboard_state }}
  docker_compose:
    project_name: kanboard
    definition:
      version: '3.6'
      services:
          kanboard:
              image: "kanboard/kanboard:{{ compositional_kanboard_version }}"
              container_name: kanboard
              restart: always
              volumes:
                  - "/srv/{{ compositional_kanboard_storage }}/kanboard_data:/var/www/app/data"
                  - "/srv/{{ compositional_kanboard_storage }}/kanboard_plugins:/var/www/app/plugins"
                  # We are not using the storage location here for two reasons. First of all, if we
                  # use that location currently, it messes with the volumes, since the container natively
                  # exposes `/etc/nginx/ssl`, and when we try to put this in a separate location other than
                  # the normal volume directory, it barfs and only includes the `ssl` directory. This _has_
                  # to have something to do with the volume being exposed, but there is nothing in the docs
                  # that says that you can't mount a parent directory to a separate location from the
                  # system location if a subdirectory is exposed. Secondly, since there are no changes made
                  # during normal system operation to this directory after the setup is complete, and the
                  # setup (replacing nginx.conf) runs every time we redeploy, the change will be made as
                  # soon as any run is executed using these tasks. So when migrating a host, we don't need
                  # to keep the contents of this directory, as we will set them up much like we do for most
                  # of the other configuration directories. I hate having a one-off like this, but since it
                  # will always be fixed on _any_ run of this role, we are safe to break the paradigm in
                  # this case.
                  #
                  # See https://forums.docker.com/t/losing-files-when-creating-volume-of-parent-directory-of-exposed-volume-as-bind-mount/80890
                  # for more info
                  - "nginx:/etc/nginx"
              networks:
                  - frontend
                  - backend
              environment:
                DATABASE_URL: "{{ compositional_backend_type }}://kanboard:{{ compositional_kanboard_backend_password }}@database:{{ compositional_backend_port }}/kanboard"
              healthcheck:
                test: "{{ compositional_kanboard_healthcheck }}"
                interval: 5s
                timeout: 30s
                retries: 3
      networks:
          frontend:
              external: true
          backend:
              external: true
      volumes:
        nginx:
    build: "{{ compositional_kanboard_build }}"
    state: "{{ compositional_kanboard_state }}"
    restarted: "{{ compositional_kanboard_restarted }}"
  register: compositional_kanboard_output
  no_log: True

- name: (kanboard) Symlink kanboard directory
  shell: docker exec -i kanboard bash -c "ln -snfT /var/www/app/ /var/www/app/kanboard"

- name: (kanboard) nginx.conf is deployed
  copy:
    src: 'kanboard_nginx.conf'
    dest: '/var/lib/docker/volumes/kanboard_nginx/_data/nginx.conf'
  notify: 'Restart Kanboard'

#
# Bind Mountpoints
#

- name: (kanboard) Find source filesystem directory
  shell: for i in $(docker inspect --format {% raw %}{{.GraphDriver.Data.LowerDir}}{% endraw %} kanboard | tr ':' ' '); do if [[ -d ${i}{{ item['directory'] }} ]]; then echo ${i}; fi; done | head -n 1
  args:
    executable: /bin/bash
  when: not item['directory'].startswith('/srv')
  loop: "{{ compositional_kanboard_bind_mountpoints }}"
  register: compositional_kanboard_src_dirs

- debug:
    var: compositional_kanboard_src_dirs

- name: (kanboard) Register kanboard non-volume bind-mountpoints for proxy
  set_fact:
    compositional_proxy_bind_mountpoints: "{{ compositional_proxy_bind_mountpoints + [{'location': item['item']['location'], 'directory': item['stdout'] + item['item']['directory']}] }}"
  when: not item['item']['directory'].startswith('/srv')
  loop: "{{ compositional_kanboard_src_dirs['results'] }}"


- name: (kanboard) Register kanboard volume bind-mountpoints for proxy
  set_fact:
    compositional_proxy_bind_mountpoints: "{{ compositional_proxy_bind_mountpoints + [item] }}"
  when: item['directory'].startswith('/srv')
  loop: "{{ compositional_kanboard_bind_mountpoints }}"
