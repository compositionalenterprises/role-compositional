---
- name: (nextcloud) Nginx conf is deployed
  template:
    src: "nginx_nextcloud.conf.j2"
    dest: "/srv/{{ compositional_nginx_storage }}/nginx_conf.d/{{ environment_domain }}/nextcloud.conf"
  notify: 'Restart Frontend'

- name: (nextcloud) The database service is up and initialized
  # We're running a while loop to check to ensure that the mysql database has
  # initialized:
  #   https://stackoverflow.com/questions/25503412/how-do-i-know-when-my-docker-mysql-container-is-up-and-mysql-is-ready-for-taking
  shell: 'docker exec -i database bash -c "while mysql -uroot -p{{ compositional_database_root_password }} -e \"SHOW DATABASES;\" 2>&1 | grep -e \"ERROR 2002\|ERROR 1045\"; do sleep 1; done; echo \"SHOW DATABASES SUCCEEDED\""'
  no_log: "{{ compositional_no_log }}"

- name: (nextcloud) Set up the database
  shell: docker exec -i database mysql -uroot -p{{ compositional_database_root_password }} <<< "{{ compositional_nextcloud_mysql_script }}"
  args:
    executable: '/bin/bash'
  no_log: "{{ compositional_no_log }}"

- name: (nextcloud) The nextcloud service is built and {{ compositional_nextcloud_state }}
  docker_compose:
    project_name: nextcloud
    definition:
      version: '3.6'
      services:
          nextcloud:
              image: "nextcloud:{{ compositional_nextcloud_version }}"
              container_name: nextcloud
              restart: always
              volumes:
                  - "/srv/{{ compositional_nextcloud_storage }}/nextcloud_data:/var/www/html/data"
                  - "/srv/{{ compositional_nextcloud_storage }}/nextcloud_config:/var/www/html/config"
                  - "/srv/{{ compositional_nextcloud_storage }}/nextcloud_themes:/var/www/html/themes"
                  - "/srv/{{ compositional_nextcloud_storage }}/nextcloud_custom_apps:/var/www/html/custom_apps"
              networks:
                  - frontend
                  - backend
              environment:
                  MYSQL_HOST: "database"
                  MYSQL_DATABASE: "nextcloud"
                  MYSQL_USER: "nextcloud"
                  MYSQL_PASSWORD: "{{ compositional_nextcloud_backend_password }}"
                  NEXTCLOUD_ADMIN_USER: "{{ compositional_nextcloud_admin_user }}"
                  NEXTCLOUD_ADMIN_PASSWORD: "{{ compositional_nextcloud_admin_password }}"
                  NEXTCLOUD_TRUSTED_DOMAINS: "{{ environment_domain }} nextcloud"
              healthcheck:
                test: "{{ compositional_nextcloud_healthcheck }}"
                interval: 5s
                timeout: 30s
                retries: 3
      networks:
          frontend:
              external: true
          backend:
              external: true
    pull: "{{ compositional_nextcloud_pull }}"
    state: "{{ compositional_nextcloud_state }}"
    restarted: "{{ compositional_nextcloud_restarted }}"
  register: compositional_nextcloud_output_1
  no_log: "{{ compositional_no_log }}"

#
# Install/Upgrade Nextcloud as necessary
#
- name: Restart frontend proxy
  include_tasks: ./bind_mountpoints.yml

- name: (nextcloud) Get nextcloud status
  shell: docker exec -u 33 -i nextcloud bash -c "curl -SL http://localhost/status.php"
  register: compositional_nextcloud_status_result
  until: compositional_nextcloud_status_result['stdout'].startswith('{')
  retries: 24
  delay: 5

- name: (nextcloud) Create nextcloud status variable
  set_fact:
    compositional_nextcloud_status: "{{ compositional_nextcloud_status_result['stdout'] | from_json }}"

- name: (nextcloud) Install Nextcloud
  shell: docker exec -u 33 -i nextcloud bash -c "./occ maintenance:install --admin-user 'admin' --admin-pass '{{ compositional_nextcloud_admin_password }}'"
  when: not compositional_nextcloud_status['installed']

- name: (nextcloud) Upgrade Nextcloud DB
  shell: 'docker exec -u 33 -i nextcloud bash -c "./occ upgrade --no-interaction"'
  when: compositional_nextcloud_status['needsDbUpgrade']

- name: (nextcloud) Update Installed Applications
  shell: 'docker exec -u 33 -i nextcloud bash -c "./occ app:update --all"'

- name: (nextcloud) Turn off maintenance moce
  shell: 'docker exec -u 33 -i nextcloud bash -c "./occ maintenance:mode --off"'
  when: compositional_nextcloud_status['maintenance']
#
# Set up config files
#
- name: (nextcloud) Make sure Nextcloud has fully initialized
  shell: 'docker exec -i nextcloud bash -c "ps -ef | grep apache2 | grep -ve grep -e entrypoint"'
  retries: 15
  delay: 15
  register: nextcloud_initialized
  until: nextcloud_initialized['rc'] == 0

- name: (nextcloud) config.php is configured with overwritewebroot
  lineinfile:
    path: "/srv/{{ compositional_nextcloud_storage }}/nextcloud_config/config.php"
    insertafter: "overwrite.cli.url"
    line: "{{ item }}"
  loop:
    - "  'overwritewebroot' => '/nextcloud',"
    - "  'overwriteprotocol' => 'https',"
  notify: 'Restart Nextcloud'

- name: (nextcloud) config.php is configured with dbtableprefix
  lineinfile:
    path: "/srv/{{ compositional_nextcloud_storage }}/nextcloud_config/config.php"
    regexp: "dbtableprefix"
    line: "  'dbtableprefix' => 'oc_',"
  when: compositional_nextcloud_legacy_dbtableprefix
  notify: 'Restart Nextcloud'

#
# Bind Mountpoints
#

- name: (nextcloud) Find source filesystem directory
  shell: for i in $(docker inspect --format {% raw %}{{.GraphDriver.Data.LowerDir}}{% endraw %} nextcloud | tr ':' ' '); do if [[ -d ${i}{{ item['directory'] }} ]]; then echo ${i}; fi; done | head -n 1
  args:
    executable: /bin/bash
  loop: "{{ compositional_nextcloud_bind_mountpoints }}"
  when: not item['directory'].startswith('/srv')
  register: compositional_nextcloud_src_dirs

- name: (nextcloud) Register nextcloud non-volume bind-mountpoints for proxy
  set_fact:
    compositional_proxy_bind_mountpoints: "{{ compositional_proxy_bind_mountpoints + [{'location': item['item']['location'], 'directory': item['stdout'] + item['item']['directory']}] }}"
  when: not item['item']['directory'].startswith('/srv')
  loop: "{{ compositional_nextcloud_src_dirs['results'] }}"

- name: (nextcloud) Register nextcloud volume bind-mountpoints for proxy
  set_fact:
    compositional_proxy_bind_mountpoints: "{{ compositional_proxy_bind_mountpoints + [item] }}"
  when: item['directory'].startswith('/srv')
  loop: "{{ compositional_nextcloud_bind_mountpoints }}"

- name: (nextcloud) Reset the bind mountpoints in order to get nextcloud healthy
  include_tasks: ./bind_mountpoints.yml
