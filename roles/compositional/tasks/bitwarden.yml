---
- name: (bitwarden) Nginx conf is deployed
  template:
    src: "nginx_bitwarden.conf.j2"
    dest: "/srv/{{ compositional_nginx_storage }}/nginx_conf.d/{{ environment_domain }}/bitwarden.conf"
  notify: 'Restart Frontend'

- name: (bitwarden) The latest bitwarden service is built and {{ compositional_bitwarden_state }}
  docker_compose:
    project_name: bitwarden
    definition:
      version: '3.6'
      services:
          bitwarden:
              image: "vaultwarden/server:{{ compositional_bitwarden_version }}"
              container_name: bitwarden
              restart: always
              volumes:
                  - "/srv/{{ compositional_bitwarden_storage}}/bitwarden_data:/data/"

              networks:
                  - frontend

              environment:
                ADMIN_TOKEN: "{{ compositional_bitwarden_admin_token }}"
                LOG_LEVEL: "debug"

      networks:
          frontend:
              external: true

    pull: "{{ compositional_bitwarden_pull }}"
    state: "{{ compositional_bitwarden_state }}"
    restarted: "{{ compositional_bitwarden_restarted }}"
  register: compositional_bitwarden_output

#
# Bind Mountpoints
#

- name: (bitwarden) Find source filesystem directory
  shell: for i in $(docker inspect --format {% raw %}{{.GraphDriver.Data.LowerDir}}{% endraw %} bitwarden | tr ':' ' '); do if [[ -d ${i}{{ item['directory'] }} ]]; then echo ${i}; fi; done | head -n 1
  args:
    executable: /bin/bash
  loop: "{{ compositional_bitwarden_bind_mountpoints }}"
  when: not item['directory'].startswith('/srv')
  register: compositional_bitwarden_src_dirs

- name: (bitwarden) Register bitwarden non-volume bind-mountpoints for proxy
  set_fact:
    compositional_proxy_bind_mountpoints: "{{ compositional_proxy_bind_mountpoints + [{'location': item['item']['location'], 'directory': item['stdout'] + item['item']['directory']}] }}"
  when: not item['item']['directory'].startswith('/srv')
  loop: "{{ compositional_bitwarden_src_dirs['results'] }}"

- name: (bitwarden) Register bitwarden volume bind-mountpoints for proxy
  set_fact:
    compositional_proxy_bind_mountpoints: "{{ compositional_proxy_bind_mountpoints + [item] }}"
  when: item['directory'].startswith('/srv')
  loop: "{{ compositional_bitwarden_bind_mountpoints }}"

- name: (bitwarden) Reset the bind mountpoints in order to get bitwarden healthy
  include_tasks: ./bind_mountpoints.yml

#
# Admin Password
#
- name: (bitwarden) Bitwarden is healthy
  shell: docker exec -i bitwarden bash -c "curl -sSL --fail localhost"
  register: compositional_bitwarden_health
  until: compositional_bitwarden_health['rc'] == 0
  retries: 24
  delay: 5

- name: (bitwarden) Get the registration parameters
  script:
    cmd: "../files/bitwarden_registration_params.py
            -n Admin
            -e admin@{{ environment_domain }}
            -p {{ compositional_bitwarden_admin_password }}
         "
  delegate_to: localhost
  become: False
  register: compositional_bitwarden_registration_params_result

- name: (bitwarden) Post the registration to the API URL
  shell: "
      docker exec -i bitwarden bash -c \"
        curl
          --header 'Content-Type: application/json'
          --request POST
          --data '{{ compositional_bitwarden_registration_params_result['stdout'].strip() }}'
          http://localhost/api/accounts/register
      \"
    "
  register: compositional_bitwarden_admin_post_result
  failed_when:
    - "'error' in compositional_bitwarden_admin_post_result['stdout']"
    - "'User already exists' not in compositional_bitwarden_admin_post_result['stdout']"
