---
- name: (bookstack) Nginx conf is deployed
  template:
    src: "nginx_bookstack.conf.j2"
    dest: "/srv/{{ compositional_nginx_storage }}/nginx_conf.d/{{ environment_domain }}/bookstack.conf"
  notify: 'Restart Frontend'

- name: (bookstack) The MySQL database service is up and initialized
  # We're running a while loop to check to ensure that the mysql database has
  # initialized:
  #   https://stackoverflow.com/questions/25503412/how-do-i-know-when-my-docker-mysql-container-is-up-and-mysql-is-ready-for-taking
  shell: 'docker exec -i database bash -c "while mysql -uroot -p{{ compositional_database_root_password }} -e \"SHOW DATABASES;\" 2>&1 | grep -e \"ERROR 2002\|ERROR 1045\"; do sleep 1; done; echo \"SHOW DATABASES SUCCEEDED\""'
  no_log: "{{ compositional_no_log }}"

- name: (bookstack) Set up the MySQL database
  shell: docker exec -i database mysql -uroot -p{{ compositional_database_root_password }} <<< "{{ compositional_bookstack_mysql_script }}"
  args:
    executable: '/bin/bash'
  no_log: "{{ compositional_no_log }}"

- name: (bookstack) The latest bookstack service is built and {{ compositional_bookstack_state }}
  docker_compose:
    project_name: bookstack
    definition:
      version: '3.6'
      services:
          bookstack:
              image: "solidnerd/bookstack:{{ compositional_bookstack_version }}"
              container_name: bookstack
              restart: always
              volumes:
                  - "/srv/{{ compositional_bookstack_storage }}/bookstack_uploads:/var/www/bookstack/public/uploads"
                  - "/srv/{{ compositional_bookstack_storage }}/bookstack_storage:/var/www/bookstack/public/storage"
              networks:
                  - frontend
                  - backend
              environment:
                DB_HOST: 'database'
                DB_DATABASE: 'bookstack'
                DB_USERNAME: 'bookstack'
                DB_PASSWORD: "{{ compositional_bookstack_backend_password }}"
                DISABLE_EXTERNAL_SERVICES: 'true'
                APP_URL: "https://{{ environment_domain }}/bookstack"

              healthcheck:
                test: "{{ compositional_bookstack_healthcheck }}"
                interval: 5s
                timeout: 30s
                retries: 3

      networks:
          frontend:
              external: true
          backend:
              external: true
      volumes:
        nginx:
    pull: "{{ compositional_bookstack_pull }}"
    state: "{{ compositional_bookstack_state }}"
    restarted: "{{ compositional_bookstack_restarted }}"
  register: compositional_bookstack_output
  no_log: "{{ compositional_no_log }}"

#
# Bind Mountpoints
#
- name: (bookstack) Find source filesystem directory
  shell: for i in $(docker inspect --format {% raw %}{{.GraphDriver.Data.LowerDir}}{% endraw %} bookstack | tr ':' ' '); do if [[ -d ${i}{{ item['directory'] }} ]]; then echo ${i}; fi; done | head -n 1
  args:
    executable: /bin/bash
  when: not item['directory'].startswith('/srv')
  loop: "{{ compositional_bookstack_bind_mountpoints }}"
  register: compositional_bookstack_src_dirs

- name: (bookstack) Register bookstack non-volume bind-mountpoints for proxy
  set_fact:
    compositional_proxy_bind_mountpoints: "{{ compositional_proxy_bind_mountpoints + [{'location': item['item']['location'], 'directory': item['stdout'] + item['item']['directory']}] }}"
  when: not item['item']['directory'].startswith('/srv')
  loop: "{{ compositional_bookstack_src_dirs['results'] }}"

- name: (bookstack) Register bookstack volume bind-mountpoints for proxy
  set_fact:
    compositional_proxy_bind_mountpoints: "{{ compositional_proxy_bind_mountpoints + [item] }}"
  when: item['directory'].startswith('/srv')
  loop: "{{ compositional_bookstack_bind_mountpoints }}"

#
# Admin Password
#
- name: (bookstack) Install Tinker
  shell: "
    docker exec -i bookstack bash -c '
      COMPOSER_MEMORY_LIMIT=-1 /var/www/bookstack/vendor/composer/composer/bin/composer require laravel/tinker'
    "

- name: (bookstack) Set the admin user's password
  # While it's crap that we have to use double escapes, it's the only way that bash doesn't throw
  # an error when passing the parenthesis.
  shell: "
    docker exec -u 0 -i bookstack bash -c \"
      echo -e '
        \\$user = Bookstack\\Auth\\User::where(\\\"email\\\", \\\"admin@admin.com\\\")->first();
        \\$user->password = Hash::make(\\\"{{ compositional_bookstack_admin_password }}\\\");
        \\$user->save();'
      | php artisan tinker\"
    "
