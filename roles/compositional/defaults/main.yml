---
# defaults file for role-compositional

#
# General Vars (o7)
#
compositional_frontend_service: 'nginx'
compositional_backend_service: 'mariadb'
compositional_database_root_password: 'testpassword'
compositional_services:
  - 'bitwarden'
  - 'bookstack'
  - 'commandcenter'
  - 'firefly'
  - 'kanboard'
  - 'nextcloud'
  - 'rundeck'
  - 'wordpress'
# Here we want to default to portal if it's being deployed.
# Otherwise, just default to nill and have it redirect to the
# default html welcome page
compositional_webroot_redirect: "{% if 'portal' in compositional_services %}portal{% else %}index.html{% endif %}"
# Here we default to always setting up the services. Without this in place, we only install the frontend and the backend.
compositional_setup_services: True
# If we have any redirects to create, we can add them in the environment.
# This would be for when we are pointing another DNS entry to the same server,
# and want to have it redirect to a specific subdirectory, like:
#   - mynextcloudinstance.com -> my.ourcompose.com/nextcloud
#
# For nginx, we capture the request, and issue a 301 to redirect to the appropriate location.
#
# In order to check if we should attemtp to generate a cert for these, as well as put them into
# the nginx default conf, we have to determine where the certs are, so we append the path to where
# the cert file should be under the root of the compositional nginx_cert_volume value. This can be any
# type of file, we're just testing if it's present or not.
#
# this should be a list in the format of:
# compositional_domain_redirects:
#   - {domain: 'ourcomposecast.com', redirect: 'https://ourcompose.com/jekyll', cert: 'live/ourcomposecast.com/fullchain.pem', key: 'live/ourcomposecast.com/privkey.pem'}
#   - {domain: 'ourcomposesignup.com', redirect: 'https://ourcompose.com/commandcenter', cert: 'live/ourcomposesignup.com/fullchain.pem', key: 'live/ourcomposesignup.com/privkey.pem'}
compositional_domain_redirects: []
compositional_no_log: True

#
# Environment Vars
#
environment_domain: 'example.com'
environment_admin: 'admin'

#
# Reverse Proxy
#
compositional_proxy_bind_mountpoints: []
compositional_proxy_html_dir: '/usr/share/nginx/html'


#
# Nginx Frontend
#
compositional_nginx_pull: 'yes'
compositional_nginx_state: 'present'
compositional_nginx_restarted: no
compositional_nginx_version: '1.17'
compositional_nginx_storage: 'local'
compositional_nginx_cert_volume: '/etc/letsencrypt:/etc/letsencrypt'
compositional_nginx_cert_fullchain: "/etc/letsencrypt/live/{{ environment_domain }}/fullchain.pem"
compositional_nginx_cert_privkey: "/etc/letsencrypt/live/{{ environment_domain }}/privkey.pem"
# This could probably be better
compositional_nginx_healthcheck: |
  service nginx status || exit 1

#
# MariaDB Backend
#
compositional_mariadb_pull: 'yes'
compositional_mariadb_state: 'present'
compositional_mariadb_restarted: yes
compositional_mariadb_version: '10.4'
compositional_mariadb_storage: 'local'
compositional_mariadb_healthcheck: |
  mysql -uroot -p{{ compositional_database_root_password }} -e 'SHOW DATABASES;' \
  || exit 1

#
# Kanboard
#
compositional_kanboard_pull: yes
compositional_kanboard_state: present
compositional_kanboard_restarted: yes
compositional_kanboard_version: 'v1.2.17'
compositional_kanboard_storage: 'local'
compositional_kanboard_admin_password: 'testpassword'
compositional_kanboard_backend_password: 'testpassword'
compositional_kanboard_bind_mountpoints:
  - {location: '/kanboard/assets/', directory: '/var/www/app/assets'}
compositional_kanboard_mysql_script: |
  CREATE USER IF NOT EXISTS 'kanboard'@'%' IDENTIFIED BY '{{ compositional_kanboard_backend_password }}';
  CREATE DATABASE IF NOT EXISTS kanboard CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
  GRANT ALTER, CREATE, DELETE, DROP, INDEX, INSERT, REFERENCES, SELECT, UPDATE ON kanboard.* TO 'kanboard'@'%';
compositional_kanboard_healthcheck: |
  curl -sSL --fail {{ environment_domain }}/kanboard \
  && curl -sSL --fail {{ environment_domain }}//kanboard/assets/img/favicon.png \
  || exit 1


#
# Nextcloud
#
compositional_nextcloud_pull: yes
compositional_nextcloud_state: present
compositional_nextcloud_restarted: yes
compositional_nextcloud_version: '20'
compositional_nextcloud_storage: 'local'
compositional_nextcloud_backend_password: 'testpassword'
compositional_nextcloud_mysql_script: |
  CREATE USER IF NOT EXISTS 'nextcloud'@'%' IDENTIFIED BY '{{ compositional_nextcloud_backend_password }}';
  CREATE DATABASE IF NOT EXISTS nextcloud;
  GRANT ALL PRIVILEGES ON nextcloud.* TO 'nextcloud'@'%' IDENTIFIED BY '{{ compositional_nextcloud_backend_password }}';
  FLUSH privileges;
compositional_nextcloud_admin_user: 'admin'
compositional_nextcloud_admin_password: 'testpassword'
compositional_nextcloud_legacy_dbtableprefix: False
compositional_nextcloud_healthcheck: |
  curl -sSL --fail {{ environment_domain }}/nextcloud/status.php \
  || exit 1

#
# Wordpress
#
compositional_wordpress_pull: yes
compositional_wordpress_state: present
compositional_wordpress_restarted: yes
compositional_wordpress_version: '5.5'
compositional_wordpress_storage: 'local'
compositional_wordpress_title: 'Wordpress Blog'
compositional_wordpress_admin_password: 'testpassword'
compositional_wordpress_backend_password: 'testpassword'
compositional_wordpress_mysql_script: |
  CREATE USER IF NOT EXISTS 'wordpress'@'%' IDENTIFIED BY '{{ compositional_wordpress_backend_password }}';
  CREATE DATABASE IF NOT EXISTS wordpress;
  GRANT ALL PRIVILEGES ON wordpress.* TO 'wordpress'@'%';
compositional_wordpress_healthcheck: |
  curl -sSL --fail {{ environment_domain }}/wordpress \
  || exit 1

#
# Bitwarden
#
compositional_bitwarden_pull: yes
compositional_bitwarden_state: present
compositional_bitwarden_restarted: yes
compositional_bitwarden_version: '1.18.0'
compositional_bitwarden_storage: 'local'
compositional_bitwarden_admin_password: 'testpassword'
compositional_bitwarden_admin_token: 'testpassword'
compositional_bitwarden_bind_mountpoints:
  - {location: '/bitwarden/app/', directory: '/web-vault/app'}
  - {location: '/bitwarden/scripts/', directory: '/web-vault/scripts'}
  - {location: '/bitwarden/images/', directory: '/web-vault/images'}
  - {location: '/bitwarden/locales/', directory: '/web-vault/locales'}
  - {location: '/bitwarden/fonts/', directory: '/web-vault/fonts'}

#
# Firefly
#
compositional_firefly_pull: yes
compositional_firefly_state: present
compositional_firefly_restarted: yes
compositional_firefly_version: 'version-5.4.5'
compositional_firefly_storage: 'local'
compositional_firefly_admin_password: 'testpassword1234'
compositional_firefly_backend_password: 'testpassword'
# This value has to be exactly 32 characters, it is the encryption key for your database and sessions
compositional_firefly_app_key: 'testtesttesttesttesttesttesttest'
compositional_firefly_bind_mountpoints:
  - {location: '/firefly/v1/css/', directory: '/var/www/html/public/v1/css'}
  - {location: '/firefly/v1/fonts/', directory: '/var/www/html/public/v1/fonts'}
  - {location: '/firefly/v1/images/', directory: '/var/www/html/public/v1/images'}
  - {location: '/firefly/v1/js/', directory: '/var/www/html/public/v1/js'}
  - {location: '/firefly/v1/lib/', directory: '/var/www/html/public/v1/lib'}
compositional_firefly_mysql_script: |
  CREATE USER IF NOT EXISTS 'firefly'@'%' IDENTIFIED BY '{{ compositional_firefly_backend_password }}';
  CREATE DATABASE IF NOT EXISTS firefly;
  GRANT ALL PRIVILEGES ON firefly.* TO 'firefly'@'%';
compositional_firefly_healthcheck: |
  curl -sSL --fail {{ environment_domain }}/firefly \
  && curl -sSL --fail {{ environment_domain }}/firefly/$$(curl -sSL --fail {{ environment_domain }}/firefly | grep -oe 'v1/css/firefly.css?v=[0-9.]\+') \
  || exit 1

#
# Jekyll
#
# This value has to be exactly 32 characters, it is the encryption key for your database and sessions
compositional_jekyll_pull: yes
compositional_jekyll_state: present
compositional_jekyll_restarted: yes
compositional_jekyll_version: '4.0.1'
compositional_jekyll_storage: 'local'
compositional_jekyll_port: '8080'
compositional_jekyll_git_url: 'https://github.com/volny/creative-theme-jekyll.git'
compositional_jekyll_git_branch: 'master'
compositional_jekyll_bind_mountpoints:
  - {location: '/jekyll/font-awesome/fonts/', directory: '/srv/{{ compositional_jekyll_storage }}/jekyll_jekyll/font-awesome/fonts'}
  - {location: '/jekyll/img/', directory: '/srv/{{ compositional_jekyll_storage }}/jekyll_jekyll/img'}
  - {location: '/jekyll/js/', directory: '/srv/{{ compositional_jekyll_storage }}/jekyll_jekyll/js'}
compositional_jekyll_extra_commands: |
  echo "Hello, World!"
  echo "Command number 2"
# With this healthcheck we are doing two things. The first thing is to check the root jekyll page.
# The second thing is a bit more involved. We are getting that page again, and checking for the first path
# to an image. Once we get the path to that image, we try to get that image to make sure that the reverse
# proxy is doing it's job buffering the assets correctly. However, we only do this in the case that the
# reverse proxy is, in fact, buffering anything. We do this by checking to make sure that there are
# some bind mountpoints that are being used, and then checking a file that falls into one of them.
# We lastly do some trickery to make sure that image is within any of the bind_mountpoints.
# We're also doing a substitution of the last part of the environment_domain (e.g. ".com") and
# removing that, since there is the possibility of that part of the url getting caught if the full
# path to the resource is given in the link. We exclude periods though, so it's only the last part
# minus the period.
compositional_jekyll_healthcheck: |
  wget --quiet --no-verbose --tries=1 --spider "{{ environment_domain }}/jekyll" \
  {% if compositional_jekyll_bind_mountpoints | length > 0 %} \
    && set -o pipefail \
    && path=$$(wget --quiet {{ environment_domain }}/jekyll -O - |\
            grep -oe '[a-zA-Z0-9/_-]\+.png\|[a-zA-Z0-9/_-]\+.jpg\|[a-zA-Z0-9/_-]\+.jpeg' |\
            grep -v '^image/*' |\
            grep -e "{% for bind_mountpoint in compositional_jekyll_bind_mountpoints %}{{ bind_mountpoint['location'] }}\|{{ bind_mountpoint['location'].split('/')[2:] | join('/') }}{% if not loop.last %}\|{% endif %}{% endfor %}" |\
            sed 's/^{{ environment_domain.split(".")[-1] }}//' |\
            head -n 1) \
    && prefix='/jekyll' \
    && path=$$(echo ${path} | sed 's#/jekyll##') \
    && prefix='/jekyll/' \
    && path=$$prefix$$path \
    && wget --quiet --no-verbose --tries=1 --spider {{ environment_domain }}/$${path} \
  {% endif %} \
  || exit 1

#
# Rundeck
#
compositional_rundeck_pull: yes
compositional_rundeck_state: present
compositional_rundeck_restarted: yes
compositional_rundeck_version: '3.2.9'
compositional_rundeck_storage: 'local'
compositional_rundeck_admin_password: 'testpassword'
compositional_rundeck_backend_password: 'testpassword'
compositional_rundeck_api_tokens_duration_max: '0'
compositional_rundeck_bind_mountpoints:
  - {location: '/rundeck/assets/', directory: '/home/rundeck/assets'}
compositional_rundeck_mysql_script: |
  CREATE USER IF NOT EXISTS 'rundeck'@'%' IDENTIFIED BY '{{ compositional_rundeck_backend_password }}';
  CREATE DATABASE IF NOT EXISTS rundeck;
  GRANT ALL PRIVILEGES ON rundeck.* TO 'rundeck'@'%';
compositional_rundeck_additional_setup: |
  echo "Hello, World!"
  echo "Command number 2"
compositional_rundeck_healthcheck: |
  curl -sSL --fail {{ environment_domain }}/rundeck \
  && curl -sSL --fail {{ environment_domain }}$$(curl -sSL --fail {{ environment_domain }}/rundeck | grep -o '/rundeck/assets/bootstrap.min.*css') \
  || exit 1

#
# BookStack
#
compositional_bookstack_pull: yes
compositional_bookstack_state: present
compositional_bookstack_restarted: yes
compositional_bookstack_version: '0.29.3'
compositional_bookstack_storage: 'local'
compositional_bookstack_backend_password: 'testpassword'
compositional_bookstack_admin_password: 'testpassword'
compositional_bookstack_bind_mountpoints:
  - {location: '/bookstack/dist/', directory: '/var/www/bookstack/public/dist'}
  - {location: '/bookstack/uploads/', directory: '/srv/{{ compositional_bookstack_storage }}/bookstack_uploads'}
compositional_bookstack_mysql_script: |
  CREATE USER IF NOT EXISTS 'bookstack'@'%' IDENTIFIED BY '{{ compositional_bookstack_backend_password }}';
  CREATE DATABASE IF NOT EXISTS bookstack;
  GRANT ALL PRIVILEGES ON bookstack.* TO 'bookstack'@'%';
compositional_bookstack_healthcheck: |
  curl -sSL --fail "{{ environment_domain }}/bookstack" && \
  curl -sSL --fail -o - "{{ environment_domain }}/bookstack/logo.png" &>/dev/null || \
  exit 1

#
# CommandCenter
#
compositional_commandcenter_pull: yes
compositional_commandcenter_state: present
compositional_commandcenter_restarted: yes
compositional_commandcenter_version: '1.7.3'
compositional_commandcenter_storage: 'local'
compositional_commandcenter_production_key: '5c9aceffa60041f9bd646287bce1cc72'
compositional_commandcenter_production_yml_enc: 'e9m0qCF73hjvB14tMauvmm7oymfHcfLTTyG6On9oRrLQLvBpuNxuZAPYEvvEHZzg16RS5n6NL9n3dP9FnO3hsUYrEJo/YWUx4Rd7ieSuss8ThoUPHhBIunLJZkGEG/bhYm02MwsX8NuD8nWskkJUdYjnSJTr+JwVk6JZS3I1wGI3NM22IpwYXrP9h67TG2iGXAQ7jtRWVyWvBJFoy6PPJB2iSXUr2B9JxyKSCbsg8hVGHuEzNtcL5CatPxDR8pZRroSC/7whC4HZGHLsH2vnKjzQEbpf4e6toddDqtin/o2Vrtm7YGLFCJeNe72c/q9BTF+w+i0PAxNLq94Q6DeZ2guo5k/axf44VA0CY+5tsucyDXh75EQjfFTtolROgtfwZD4Pi6bSAk9hZMFtrJpXDgESdosKctl30M9jQaDeh3PnHDOhrM5V4T73HDRPCTMdBWdG9cVHixl7XtJwh6xsFJ+Das4bwhqTMpFhowBK08TBbIgKD0DXJFCoVWDGKyvybiqfgB1w/gh5dlcXELicyJQ2qimiFhuHRMbEaaaMjJ/pJiY6DSkfnfTAit1Qqm7uy5E0vDXt3fiPzLQ1OPrrPwlOrtazfHl+s2Ej63ReXIkrNILgFj4DTk6jxzyac9S2OUOOR4iy9+N3LFtabfFsYoPd+iyJVilztBZ9/Myvu8c+0EeHU+TgQrRKfLwKPtkANjDAg6FWdMfknfnushhoA5OmABOnBDIjSwQfY0wto8Si4JdhvkhqkHOpJqHK7/hu8oq2nx8qZ916LpvjsErtPeqHllOswiQO05tcesRwA0la+5zccHALKzdyIN/fdTJK1u/yAGeJT99RC0MOA5+HtDP7Aa4fZX95mPGLJlPcKfvAT38HtrCJcqLwyFnoZPmyJgKimO2YHUZZqllW9vvu9dfSlzSRoqZ2pS4lpyMuCMWaALa7v/Fw6MidvApEeOzcK5usKi+PvwY6hwtf/Y9YNT0QIoJe7mbQLkn08Go7Nl73UWttRVvBlIfajSEH3HaEHJWB9pxhCYxTEi1xGmGA6+gnamI/xbw6jHpeDo5TQ9HyjjVx1w7wBOHmLx9sMpqvRse6k7X7vDC2CC2/0EvzqfPjon6/60xNK4sY1u+GqR9X1WypULYGfp/31GTWBC+a7asmBCDjC6ZrKHHf/WRr4O8SFPVPxYldtnMRuDCFv8zyrBZPsWc0H76delk6gUgsZxNJJ4GoSM0YLU86z1rUcpQRPg3CJH+d+gV6BTGthsXRyeet3zzilxrhXiMLNvAHSEqjbQxYKiubNyCO+SRDfqV5T2GWbOMyZxNhs1aOS6Wd2j7/6TCT1ELpv53uQ/rTqnBD0KwdiCnj+LrtzFsJqTOEgeOMK3b03d+SqFWzH+SudA+r1bs8pgFm2PHprpL9oRg+7/w/M44yW+Qzs1yLJsBFxEnhilflYqT75n59/tuJEFnpID9c3Q==--iHmLvnc1iZR4WIWJ--QJwJJeA+rbAb+Pu/FUD9tA=='
compositional_commandcenter_admin_password: 'testpassword'
compositional_commandcenter_backend_password: 'testpassword'
compositional_commandcenter_bind_mountpoints:
  - {location: '/commandcenter/packs/', directory: '/app/public/packs'}
compositional_commandcenter_mysql_script: |
  CREATE DATABASE IF NOT EXISTS commandcenter;
  GRANT ALL PRIVILEGES ON commandcenter.* TO 'commandcenter'@'%' IDENTIFIED BY '{{ compositional_commandcenter_backend_password }}';
compositional_commandcenter_healthcheck: |
  wget --quiet --no-verbose --tries=1 --spider localhost:3000/commandcenter \
  && wget --quiet --no-verbose --tries=1 --no-check-certificate --spider proxy$$(wget --quiet --no-verbose --tries=1 localhost:3000/commandcenter -O - | grep -oe "[A-Za-z0-9/_-]\+.css" | head -n 1 | sed 's/^{{ environment_domain.split(".")[-1] }}//') \
  || exit 1

#
# Portal
#
compositional_portal_pull: yes
compositional_portal_state: present
compositional_portal_restarted: yes
compositional_portal_version: '1.6.0'
compositional_portal_storage: 'local'
compositional_portal_role_branch: 'master'
compositional_portal_backend_password: 'testpassword'
compositional_portal_production_key: 'cb569b8ea39a7dada216dffaee8f7ec3'
compositional_portal_production_yml_enc: 'mMb7knWzem8t5jXbs66LiTh+MuR4VhwttCJcshES87zG37kDxQ6tqKE5FiW3BW70orag1vVTxfL6kxnd665c/P0L9/ImWFKtbPNBbomsy/CVyFbQo4VkWC0SOi1FzKNFKkmLPdjcqFt0A37BYQjXdTNk+7x9IGyTI2tZg4h2p6qqGXB5NBJYIWoXEmCTnO9H05HxMoCqhTQCoCZeKeXKVIppweTsT80LIIVM6VJIomaSItp/XzMrmvaKek466hw9koR5z7dinzAtJnnsrBzbfF2+yAtryp8jpi+gvpll--qAM4pQghNMegIdn5--uKGo/l6lbwxIORk+raRVOw=='
compositional_portal_admin_password: 'testpassword'
compositional_portal_org_name: "{{ environment_domain.split('.')[0].upper() }}"
compositional_portal_admin_email: "{{ environment_admin }}@{{ environment_domain }}"
compositional_portal_initial_install: "0"
# range takes (i, j) where the generated ints are [i, i+1, i+2, ..., j-1].
# So, by doing this, we are actually NOT allowing anything to be set at 3:60, etc.
# but the highest option we could have would be 5:59
compositional_portal_cron_minute: "{{ range(0, 60) | random }}"
compositional_portal_cron_hour: "{{ range(3, 5) | random }}"
compositional_portal_cron_day: "*/2"
compositional_portal_bind_mountpoints:
  - {location: '/portal/packs/', directory: '/app/public/packs'}
compositional_portal_mysql_script: |
  CREATE USER IF NOT EXISTS 'portal'@'%' IDENTIFIED BY '{{ compositional_portal_backend_password }}';
  CREATE DATABASE IF NOT EXISTS portal;
  GRANT ALL PRIVILEGES ON portal.* TO 'portal'@'%';
compositional_portal_healthcheck: |
  wget --quiet --no-verbose --tries=1 --spider {{ environment_domain }}/portal \
  && wget --quiet --no-verbose --tries=1 --spider {{ environment_domain }}$$(wget --quiet --no-verbose --tries=1 {{ environment_domain }}/portal -O - | grep -oe "[A-Za-z0-9/_-]\+.css" | head -n 1 | sed 's/^{{ environment_domain.split(".")[-1] }}//') \
  || exit 1
